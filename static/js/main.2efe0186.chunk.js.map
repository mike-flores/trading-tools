{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","tradeData","bankRoll","tradeType","entryPrice","stopLoss","targetPrice","useState","positionSize","setPositionSize","Container","style","height","Row","alignItems","Col","backgroundColor","paddingTop","xs","formData","labelLocation","dataField","disabled","className","id","text","type","marginTop","marginBottom","fontWeight","justifyContent","onClick","entry","parseInt","stop","diff","bRoll","risk","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAqGeA,EA5EH,WACT,IAAMC,EAAY,CACfC,SAAU,GACVC,UAAW,GACX,QAAS,GACTC,WAAY,GACZC,SAAU,GACVC,YAAa,IAPD,EAUyBC,mBAAS,GAVlC,mBAURC,EAVQ,KAUMC,EAVN,KAwBf,OACG,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,OAAQ,UACzB,kBAACC,EAAA,EAAD,CAAKF,MAAO,CAAEG,WAAY,SAAUF,OAAQ,SACzC,kBAACG,EAAA,EAAD,CACGJ,MAAO,CACJK,gBAAiB,kBACjBC,WAAY,QAEfC,GAAG,MAEH,kBAACL,EAAA,EAAD,KACG,kBAACE,EAAA,EAAD,KACG,kBAAC,IAAD,CAAMI,SAAUlB,EAAWmB,cAAc,OACtC,kBAAC,OAAD,CAAMC,UAAU,YAAYC,UAAQ,IACpC,kBAAC,OAAD,CAAMD,UAAU,aAChB,kBAAC,OAAD,CAAMA,UAAU,UAChB,kBAAC,OAAD,CAAMA,UAAU,eAChB,kBAAC,OAAD,CAAMA,UAAU,aAChB,kBAAC,OAAD,CAAMA,UAAU,cAAcC,UAAQ,IAEtC,yBAAKC,UAAU,eACZ,kBAAC,SAAD,CAAQC,GAAG,SAASC,KAAK,WAAWC,KAAK,gBAKrD,kBAACb,EAAA,EAAD,CAAKF,MAAO,CAAEgB,UAAW,SACtB,kBAACZ,EAAA,EAAD,KACG,6BACG,uBAAGJ,MAAO,CAAEiB,aAAc,MAAOC,WAAY,SAA7C,yBACsBrB,OAK/B,kBAACK,EAAA,EAAD,CACGF,MAAO,CACJmB,eAAgB,WAChBH,UAAW,OACXC,aAAc,SAGjB,kBAACb,EAAA,EAAD,CAAKG,GAAG,QACL,kBAAC,SAAD,CAAQM,GAAG,SAASC,KAAK,YAAYC,KAAK,UAAUK,QAvDlD,WACjB,IApBwB3B,EAoBlB4B,EAAQC,SAAShC,EAAUG,YAC3B8B,EAAOD,SAAShC,EAAUI,UAE1B8B,IAvBkB/B,EAuBU4B,GAAOE,GAtBV9B,EAAc,IAwBvCgC,EAAQH,SAAShC,EAAUC,UAC3BmC,EAAOJ,SAAShC,EAAU,UAE1BqC,EAA8BD,EAAMF,EAAbC,EAC7B3B,EAAgB6B,YCnCFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2efe0186.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\nimport Form, { Item } from 'devextreme-react/form';\nimport { Button } from 'devextreme-react';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\n// const validationRules = {\n//    bankRoll: [{ type: 'required', message: 'Bankroll is required.' }],\n//    'risk%': [{ type: 'required', message: 'Risk % is required.' }],\n//    entryPrice: [{ type: 'required', messsage: 'Entry Price is required.' }],\n//    stopLoss: [{ type: 'required', message: 'Stop Loss is required.' }],\n//    targetPrice: [{ type: 'required', message: 'Target Price is required.' }]\n// };\n\nconst getPercentDifference = (entryPrice: number, stopLoss: number) => {\n   return ((entryPrice - stopLoss) / entryPrice) * 100;\n};\nconst getPositionSize = (bankRoll: number, riskPercent: number, percentDifference: number) => {\n   return (riskPercent / percentDifference) * bankRoll;\n};\n\nconst App = () => {\n   const tradeData = {\n      bankRoll: '',\n      tradeType: '',\n      'risk%': '',\n      entryPrice: '',\n      stopLoss: '',\n      targetPrice: ''\n   };\n\n   const [positionSize, setPositionSize] = useState(0);\n\n   const handleClick = () => {\n      const entry = parseInt(tradeData.entryPrice);\n      const stop = parseInt(tradeData.stopLoss);\n\n      const diff = getPercentDifference(entry, stop);\n\n      const bRoll = parseInt(tradeData.bankRoll);\n      const risk = parseInt(tradeData['risk%']);\n\n      const size = getPositionSize(bRoll, risk, diff);\n      setPositionSize(size);\n   };\n   return (\n      <Container style={{ height: '100vh' }}>\n         <Row style={{ alignItems: 'center', height: '100%' }}>\n            <Col\n               style={{\n                  backgroundColor: 'rgba(0,0,0,.03)',\n                  paddingTop: '15px'\n               }}\n               xs='12'\n            >\n               <Row>\n                  <Col>\n                     <Form formData={tradeData} labelLocation='top'>\n                        <Item dataField='tradeType' disabled />\n                        <Item dataField='bankRoll' />\n                        <Item dataField='risk%' />\n                        <Item dataField='entryPrice' />\n                        <Item dataField='stopLoss' />\n                        <Item dataField='targetPrice' disabled />\n\n                        <div className='dx-fieldset'>\n                           <Button id='button' text='Register' type='success' />\n                        </div>\n                     </Form>\n                  </Col>\n               </Row>\n               <Row style={{ marginTop: '15px' }}>\n                  <Col>\n                     <div>\n                        <p style={{ marginBottom: '5px', fontWeight: 'bold' }}>\n                           {`Position Size: ${positionSize}`}\n                        </p>\n                     </div>\n                  </Col>\n               </Row>\n               <Row\n                  style={{\n                     justifyContent: 'flex-end',\n                     marginTop: '15px',\n                     marginBottom: '15px'\n                  }}\n               >\n                  <Col xs='auto'>\n                     <Button id='button' text='Calculate' type='success' onClick={handleClick} />\n                  </Col>\n               </Row>\n            </Col>\n         </Row>\n      </Container>\n   );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}