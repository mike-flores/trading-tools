{"version":3,"sources":["helpers/tradeCalculator/TradeCalculator.ts","components/PositionSizeForm/PositionSizeForm.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["TradeCalculator","Cash","calculatePositionSize","risk","percentChange","bankRoll","Error","calculatePercentChange","entry","stopLoss","commonNumberOptions","min","valueChangeEvent","PositionSizeForm","useState","positionSize","setPositionSize","entryPrice","riskPercent","tradeData","id","formData","dataField","editorType","editorOptions","format","type","currency","precision","inputAttr","message","defaultValue","max","placeholder","buttonOptions","text","onClick","event","validationGroup","validate","isValid","change","parseInt","size","parseFloat","toFixed","elementAttr","Card","bg","Header","Body","readOnly","value","style","background","display","border","color","App","Container","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.092a47c4.chunk.js","sourcesContent":["/**\r\n * Performs the calculations for determining a proper position size for a trade.\r\n */\r\nexport default class TradeCalculator {\r\n   static Cash = {\r\n      /**\r\n       * @param {number} risk - The risk percent as a decimal.\r\n       * @param {number} percentChange - The percent change from entry to stop loss.\r\n       * @param {number} bankRoll - The total amount in the trading account.\r\n       * Returns the position size for a trade.\r\n       */\r\n      calculatePositionSize(risk: any, percentChange: number, bankRoll: number): number {\r\n         if (risk === 0) throw new Error(`Risk cannot be 0.`);\r\n         if (percentChange === 0) throw new Error(`Percent change cannot be 0.`);\r\n         if (bankRoll === 0) throw new Error(`Bank roll cannot be 0.`);\r\n         if (risk < 0) throw new Error('risk cannot be negative.');\r\n         if (percentChange < 0) throw new Error('Percent change cannot be negative.');\r\n         if (bankRoll <= 0) throw new Error('Bank roll cannot be negative.');\r\n\r\n         return ((risk * 100) / percentChange) * bankRoll;\r\n      }\r\n   };\r\n\r\n   /**\r\n    * @param {number} entry - The entry price of the trade.\r\n    * @param {numbet} stopLoss - The stop loss of the trade.\r\n    * Returns the percent change from the entry price to the stop loss price.\r\n    */\r\n   static calculatePercentChange = (entry: number, stopLoss: number): number => {\r\n      if (entry === 0 || stopLoss === 0) throw new Error('Value cannot be 0.');\r\n      if (entry < 0 || stopLoss < 0) throw new Error('Value cannot be negative.');\r\n\r\n      if (stopLoss > entry) return ((stopLoss - entry) / stopLoss) * 100;\r\n\r\n      return ((entry - stopLoss) / entry) * 100;\r\n   };\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, SimpleItem, ButtonItem, RequiredRule } from 'devextreme-react/form';\r\nimport { NumberBox } from 'devextreme-react/number-box';\r\nimport { Card } from 'react-bootstrap';\r\nimport TradeCalculator from '../../helpers/tradeCalculator/TradeCalculator';\r\n\r\n// eslint-disable-next-line import/no-unresolved\r\nimport './_positionSizeForm.scss';\r\n\r\nconst commonNumberOptions = {\r\n   min: 0,\r\n\r\n   valueChangeEvent: 'input'\r\n};\r\n\r\nconst PositionSizeForm: React.FC = () => {\r\n   const [positionSize, setPositionSize] = useState();\r\n\r\n   const [tradeData] = useState({\r\n      bankRoll: '',\r\n      entryPrice: '',\r\n      stopLoss: '',\r\n      riskPercent: ''\r\n   });\r\n\r\n   const handleCalculate = (event: any): void => {\r\n      const { bankRoll, entryPrice, stopLoss, riskPercent } = tradeData;\r\n      const result = event.validationGroup.validate();\r\n      if (result.isValid) {\r\n         const change = TradeCalculator.calculatePercentChange(\r\n            parseInt(entryPrice),\r\n            parseInt(stopLoss)\r\n         );\r\n\r\n         const size = TradeCalculator.Cash.calculatePositionSize(\r\n            parseFloat(riskPercent).toFixed(2),\r\n            change,\r\n            parseFloat(bankRoll)\r\n         );\r\n         setPositionSize(size);\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <Form id='position-size-form__form' formData={tradeData}>\r\n            <SimpleItem\r\n               dataField='bankRoll'\r\n               editorType='dxNumberBox'\r\n               editorOptions={{\r\n                  ...commonNumberOptions,\r\n                  format: { type: 'currency', currency: 'BTC', precision: 9 },\r\n\r\n                  inputAttr: {\r\n                     'data-testid': 'position-size-form__input-bankroll'\r\n                  }\r\n               }}\r\n            >\r\n               <RequiredRule message='Bank roll is required.' />\r\n            </SimpleItem>\r\n            <SimpleItem\r\n               dataField='entryPrice'\r\n               editorType='dxNumberBox'\r\n               editorOptions={{\r\n                  ...commonNumberOptions,\r\n                  format: { type: 'currency', currency: 'USD', precision: 1 },\r\n\r\n                  defaultValue: 200,\r\n                  inputAttr: {\r\n                     'data-testid': 'position-size-form__input-entry-price'\r\n                  }\r\n               }}\r\n            >\r\n               <RequiredRule message='Entry price is required.' />\r\n            </SimpleItem>\r\n            <SimpleItem\r\n               dataField='stopLoss'\r\n               editorType='dxNumberBox'\r\n               editorOptions={{\r\n                  ...commonNumberOptions,\r\n                  format: { type: 'currency', currency: 'USD', precision: 1 },\r\n\r\n                  inputAttr: {\r\n                     'data-testid': 'position-size-form__input-stop-loss'\r\n                  }\r\n               }}\r\n            >\r\n               <RequiredRule message='Stop loss is required.' />\r\n            </SimpleItem>\r\n            <SimpleItem\r\n               dataField='riskPercent'\r\n               editorType='dxNumberBox'\r\n               editorOptions={{\r\n                  ...commonNumberOptions,\r\n                  format: { type: 'percent', precision: 1 },\r\n                  min: 0.01,\r\n                  max: 1,\r\n                  inputAttr: {\r\n                     'data-testid': 'position-size-form__input-risk-percent',\r\n                     placeholder: ''\r\n                  }\r\n               }}\r\n            >\r\n               <RequiredRule message='Risk percent is required.' />\r\n            </SimpleItem>\r\n            <ButtonItem\r\n               buttonOptions={{\r\n                  ...commonNumberOptions,\r\n                  type: 'success',\r\n                  text: 'Calculate',\r\n                  onClick: handleCalculate,\r\n                  // useSubmitBehavior: true,\r\n                  elementAttr: {\r\n                     'data-testid': 'position-size-form__button-calculate'\r\n                  }\r\n               }}\r\n            />\r\n         </Form>\r\n         <Card id='position-size-form__results' bg='warning' text='white'>\r\n            <Card.Header>Results</Card.Header>\r\n            <Card.Body>\r\n               Position Size:\r\n               <NumberBox\r\n                  format={{ type: 'currency', currency: 'BTC', precision: 9 }}\r\n                  readOnly\r\n                  value={positionSize}\r\n                  style={{\r\n                     background: 'transparent',\r\n                     display: 'inline-block',\r\n                     border: 'none',\r\n                     color: 'white'\r\n                  }}\r\n               />\r\n            </Card.Body>\r\n         </Card>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PositionSizeForm;\r\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport PositionSizeForm from '../PositionSizeForm/PositionSizeForm';\n\nconst App: React.FC = () => {\n   return (\n      <Container>\n         <Row>\n            <Col xs={12}>\n               <PositionSizeForm />\n            </Col>\n         </Row>\n      </Container>\n   );\n};\n\nexport default App;\n","/* eslint-disable */\n/* istanbul ignore file */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n   onSuccess?: (registration: ServiceWorkerRegistration) => void;\n   onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL as string, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return;\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config);\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                     'worker. To learn more, visit https://bit.ly/CRA-PWA'\n               );\n            });\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config);\n         }\n      });\n   }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n               return;\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        'New content is available and will be used when all ' +\n                           'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration);\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration);\n                     }\n                  }\n               }\n            };\n         };\n      })\n      .catch(error => {\n         console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n   })\n      .then(response => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type');\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n               registration.unregister().then(() => {\n                  window.location.reload();\n               });\n            });\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n         }\n      })\n      .catch(() => {\n         console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n         registration.unregister();\n      });\n   }\n}\n","/* istanbul ignore file */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\nimport './index.scss';\n\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}